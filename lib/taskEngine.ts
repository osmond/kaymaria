import {TaskDTO} from './types'; import { _state as s } from './mockdb'; function addDays(d:Date,n:number){const x=new Date(d);x.setDate(x.getDate()+n);return x;} export function computeTasks(windowDays=7):TaskDTO[]{const now=new Date();const end=addDays(now,windowDays);const tasks:TaskDTO[]=[];for(const r of s.rules){const plant=s.plants.find(p=>p.id===r.plantId);if(!plant)continue;const last=s.events.filter(e=>e.plantId===r.plantId&&e.type===r.type).sort((a,b)=>+new Date(b.occurredAt)-+new Date(a.occurredAt))[0];const base=last?new Date(last.occurredAt):now;const next=addDays(base,r.intervalDays); if(next<=end){tasks.push({id:`${r.plantId}:${r.type}`,plantId:r.plantId,plantName:plant.name,type:r.type as any,dueAt:next.toISOString(),status:'due',lastEventAt:last?.occurredAt});}} return tasks.sort((a,b)=>+new Date(a.dueAt)-+new Date(b.dueAt));}
